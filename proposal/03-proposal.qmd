# The proposal
<!--
How are you going to solve the problem? Include the concrete actions you
will take and an estimated timeline. What are likely failure modes and
how will you recover from them?

This is where the proposal should be outlined.
-->

## Overview
<!--
At a high-level address what your proposal is and how it will address
the problem identified. Highlight any benefits to the R Community that
follow from solving the problem. This should be your most compelling
section.

Include concrete actions you will take and estimated timeline.
-->
The proposal is to create an R wrapper around the Rust linear algebra package [`nalgebra`](https://nalgebra.rs/). This is one of the most popular Rust packages (40 million all time downloads) and includes many features such as support for statically and dynamically sized matrices, dense and sparse matrices, geometric transformations, and matrix decompositions.

## Detail
<!--
Go into more detail about the specifics of the project and how it delivers
against the problem.

Depending on project type the detail section should include:
-->

### Minimum Viable Product

<!--
What is the smallest thing you can build that delivers value to your users?
-->

The MVP would be a functioning R package which provides most, if not all, of the existing functionality available in `nalgebra` via Rust, in an R-idiomatic fashion.

The API would resemble the [`rray`](https://rray.r-lib.org/) interface, which is an existing and proven API for a systems-language-backed matrix library, that is both idiomatic to R while also being strict and consistent.

This would include:
- Implementation of an R interface to create `nalgebra` matrix objects (both statically and dynamically sized);
- Implementation of operations on these objects
- Support for passing these objects to Rust code with minimal data conversion overhead.


### Architecture

<!--
What does the high-level architecture look like?
-->
The bindings will be done using the [`extendr`](https://github.com/extendr) package, which is a well-supported package for bindings between R and Rust. The matrices will be stored as `nalgebra` matrices, which means that other Rust-based R packages will be able to take and use the arrays without incurring object conversion costs. There would also be routines for converting the `nalgebra` matrices to other array types such as the base R arrays, which would improve compatibility with packages that use existing R linear algebra capabilities.

One potential pitfall here is that R and Rust have very distinct memory management models, which often causes issues when an object is 'shared' between two languages (see the [Python-Rust bindings package PyO3, which must make compromises to successfully deal with Python's Global Interpreter Lock and confusing garbage collection](https://pyo3.github.io/pyo3/v0.16.5/memory.html)). If this is not solvable in R, then a compromise would have to be made such as putting restrictions on how the Rust memory management of these matrices is done (see the PyO3 solution above) or how the users can interact with these matrices.

### Assumptions

<!--
What assumptions are you making that, if proven false, would invalidate the project?
-->
We are assuming that there is desire among the communities whose data analysis depends heavily on linear algebra would be interested in using R rather than a language such as Python or MATLAB, and that authors of Rust data analysis packages are interested in having R bindings. 

We have seen a desire for an R binding for a Rust differential equations package `diffsol`, [which has put a call in its README for an R language wrapper.](https://github.com/martinjrobins/diffsol?tab=readme-ov-file#wanted---developers-for-higher-level-language-wrappers)

### External dependencies

<!--
What external dependencies does the project have (e.g. libraries, services, other projects, etc.)?
-->
- `rextendr`: The R-Rust binding library.
- `nalgebra`: Rust linear algebra library being wrapped.

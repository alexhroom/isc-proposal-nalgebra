# Executive Summary

<!--
This section provides a condensed view of the entire proposal, one page long.
It should be a comprehensive high-level overview that captures the essence of the proposal, including its goals, methods, expected outcomes, deliverables, and budget.
-->
## Overview
This R Consortium ISC proposal requests $1500 for the development of a Rust-based linear algebra library for R, based on bindings to the `rextendr` library.

## The Problem
- R’s base matrix capabilities (mainly wrappers for LAPACK) are simplistic, and alternatives like the `rray` library are outdated.
- For users in science and engineering fields who need efficient linear algebra (e.g. for ODEs or Bayesian methods), Python (NumPy/SciPy) and MATLAB offer superior performance, flexibility, and robustness - R is impractical.
- Rust is increasingly used in R packages via bindings like `extendr`, `savvy`, and `cargo`. The poor state of R’s linear algebra tools hinders development of Rust-backed packages that use matrix operations.

## Proposed Solution & Deliverables
An R wrapper around the popular `nalgebra` Rust linear algebra library, implemented using the `extendr` package. This includes:

- implementing an R interface to the `nalgebra` matrix type which is R-idiomatic.
- implementing a maintainable and extensible interface to the routines available for Rust `nalgebra` matrices from R.
- The ability to use these matrices in `extendr`-based R functions written in Rust with low conversion cost, as well as efficient conversion routines to existing R matrix types for compatibility.

## Timeline

- **Months 1-2**: study of `nalgebra`, `extendr`, and similar library `rray` (for C++-based R arrays) and implementation of array interface in R
- **Months 3-4**: compatibility with `extendr` for passing array data to Rust-based R functions.
- **Months 5-6**: framework and implementation for calling `nalgebra` matrix routines in R.

## Success Metrics
- All features completed and passing robust testing with high code coverage
- Released to CRAN
- User guide and documentation

## Risk Mitigation
This project is quite small, so is relatively low-risk. The hardest part will likely be the first milestone. Risk is mitigated by the ordering of the milestones - if the first two milestones are completed, then it will be possible to pass arrays to Rust functions which can then call the matrix routines inside Rust; this means it still provides impact to the R-Rust community.